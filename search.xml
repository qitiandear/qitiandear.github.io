<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>rust数据结构</title>
      <link href="/2022/12/15/rust-shu-ju-jie-gou/"/>
      <url>/2022/12/15/rust-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<p><strong>Rust</strong> 的 <strong>Vec</strong> 其实是动态数组, 很多语言内置动态数组, 譬如 <strong>JavaScript</strong> <strong>Python</strong>这类, 像 <strong>Rust</strong> 这种具有内存控制能力的语言, 就选择了标准库内置动态数组.</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> v1 <span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property">dbg!</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">{</span>  v1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">dbg!</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>现在直接写一下 <strong>Rust</strong> 动态数组直观实现</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">T</span><span class="token punctuation">,</span>  cap<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>  len<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样直接编译能通过, 但是 <code>ptr</code> 这个裸指针不能让 <code>Drop check</code> 正常工作, 因为直接在这里使用裸指针 <code>Drop</code> 检查器会认为你没有持有任何值, 因此我们可以用 <code>Unique&lt;T&gt;</code> 处理祼指针 <code>*mut T</code>, 通过它内部的 <code>PhantomData</code> 来帮助 <code>Drop check</code> 工作.</p><blockquote><p><code>Unique&lt;T&gt;</code> 可以封装祼指针</p><ul><li><code>T</code> 是可变的</li><li>可以进行 <code>drop</code> 检查</li><li><code>T</code> 实现了 <code>Send/Sync</code>, 该指针也具备 <code>Send/Sync</code> 特性, 等于讲线程安全</li><li>指针具备非空性</li></ul></blockquote><p>既然如此自己实现一个吧, 解析源码自己写不会浪费什么时间, 还能体会别人的设计, 顺道实现一下 <code>Send/Sync</code></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>marker<span class="token punctuation">::</span></span><span class="token class-name">PhantomData</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">MyUnique</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">,</span>  _marker<span class="token punctuation">:</span> <span class="token class-name">PhantomData</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">unsafe</span> <span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Send</span> <span class="token operator">+</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span> <span class="token class-name">Send</span> <span class="token keyword">for</span> <span class="token class-name">MyUnique</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">unsafe</span> <span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Sync</span> <span class="token operator">+</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span> <span class="token class-name">Sync</span> <span class="token keyword">for</span> <span class="token class-name">MyUnique</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span> <span class="token class-name">MyUnique</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token attribute attr-name">#[inline]</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ptr<span class="token punctuation">.</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUnique</span> <span class="token punctuation">{</span>          ptr<span class="token punctuation">:</span> ptr <span class="token keyword">as</span> _<span class="token punctuation">,</span>          _marker<span class="token punctuation">:</span> <span class="token class-name">PhantomData</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token attribute attr-name">#[inline]</span>  <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token keyword">fn</span> <span class="token function-definition function">as_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>ptr <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">T</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到有个 <code>?Sized</code> 的 <code>trait bound</code> 这玩意其实是指定一下泛型的特性, 意思是指编译时确定大小, 默认情况下直接写 <code>T</code> 就是 <code>Sized</code> 了, 加了个问号就会放宽约束的范围, 编译时不确定大小的也被接受. 加上 <code>#[inline]</code> 这个属性就表示内联函数, 因为这几个函数可能会经常使用到, 内联会带点加速效果.</p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>之后我们要考虑初始化容器了, 如果容器放了东西肯定会开辟内存空间, 但是初始化的情况容器应该是空的, 既然是空的肯定不会分配内存, 那就用 <code>MyUnique</code> 建个空的东西</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">imp<span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span> <span class="token class-name">MyUnique</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token attribute attr-name">#[inline]</span>  <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token keyword">unsafe</span> <span class="token keyword">fn</span> <span class="token function-definition function">new_unchecked</span><span class="token punctuation">(</span>ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token class-name">MyUnique</span> <span class="token punctuation">{</span>      ptr<span class="token punctuation">:</span> ptr <span class="token keyword">as</span> _<span class="token punctuation">,</span>      _marker<span class="token punctuation">:</span> <span class="token class-name">PhantomData</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyUnique</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token keyword">fn</span> <span class="token function-definition function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">MyUnique</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">align_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  cap<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>  len<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"We're not ready to handle ZSTs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MyVec</span> <span class="token punctuation">{</span>      ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token punctuation">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      len<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      cap<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来写一下内存分配相关的代码, 既然我们需要分配内存, 这块其实没什么东西, 就是读一下内存分配的文档然后使用起来, 当然也要考虑对齐. 其实这是个扩容处理</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>alloc<span class="token punctuation">::</span></span><span class="token punctuation">{</span>handle_alloc_error<span class="token punctuation">,</span> realloc<span class="token punctuation">,</span> <span class="token class-name">Layout</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>mem<span class="token punctuation">;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">grow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> <span class="token punctuation">(</span>new_cap<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> new_cap <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>cap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>ptr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> layout<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> ptr<span class="token punctuation">.</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">handle_alloc_error</span><span class="token punctuation">(</span><span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">from_size_align_unchecked</span><span class="token punctuation">(</span>            new_cap <span class="token operator">*</span> elem_size<span class="token punctuation">,</span>            <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">align_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">(</span>new_cap<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">Self</span> <span class="token punctuation">{</span>        ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span>ptr <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span>        cap<span class="token punctuation">:</span> new_cap<span class="token punctuation">,</span>        len<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="push-amp-pop"><a href="#push-amp-pop" class="headerlink" title="push &amp; pop"></a>push &amp; pop</h2><p>上面已经做到能分配内存了, 接下来自然是实现基本的功能.</p><p>先分析一波 <strong>push</strong> 的行为, <strong>push</strong> 就是往动态数组添加元素, 如果满了就需要重新分配内存, 其实就是调用 <code>grow</code>, 每次添加元素后长度也要相应 <code>+1</code>, 还需要对相应地址写元素. 写入行为用 <code>std::ptr</code> 的 <code>write</code> 函数来处理, 相应的 <code>pop</code> 也很好理解, 只要把最后一个读取出来同时把长度 <code>-1</code></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span>mem<span class="token punctuation">,</span> ptr<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>ptr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> element<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token punctuation">{</span>      <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回收资源"><a href="#回收资源" class="headerlink" title="回收资源"></a>回收资源</h2><p><strong>Rust</strong> 的机制让我们处理这个问题非常简单, 只需要实现一下 <code>trait Drop</code></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> elem_size <span class="token operator">=</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> elem_size <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token function">dealloc</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>cap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解引用"><a href="#解引用" class="headerlink" title="解引用"></a>解引用</h2><p>至此, 已经实现了一个简单的数据结构, 但是我们还没法跟 <code>slice</code> 相通, 真实的 <strong>Vec</strong> 不是这样的, 所以当下我们应该实现一下自动解引用, 只要实现了下面这些东西, 我们就可以用 <code>slice</code> 的提供的接口了</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Deref</span><span class="token punctuation">,</span> <span class="token class-name">DerefMut</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Deref</span> <span class="token keyword">for</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">type</span> <span class="token type-definition class-name">Target</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">fn</span> <span class="token function-definition function">deref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token namespace">std<span class="token punctuation">::</span>slice<span class="token punctuation">::</span></span><span class="token function">from_raw_parts</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">DerefMut</span> <span class="token keyword">for</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">deref_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token namespace">std<span class="token punctuation">::</span>slice<span class="token punctuation">::</span></span><span class="token function">from_raw_parts_mut</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入跟删除"><a href="#插入跟删除" class="headerlink" title="插入跟删除"></a>插入跟删除</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入的行为其实就是把当前要插入的位置之后的所有元素分别向右移动一位, 譬如一个数组 <code>[1, 2, 3]</code>, 我要把 <code>10</code> 插入 索引 <code>1</code> 位置(就是元素 <code>2</code>), 那么 <code>10</code> 的下标就是 <code>1</code>, 同时元素 <code>2</code> 跟 <code>3</code> 的下标就是 <code>2</code> 跟 <code>3</code>, 最后就变成了 <code>[1, 10, 2, 3]</code>.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> element<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token punctuation">{</span>      <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token punctuation">{</span>        <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除的行为也很好理解, 跟插入反着来就可以了, 只要把要删除的位置之后所有的下标向左移动一位, 譬如现在把之前插入后的数组 <code>[1, 10, 2, 3]</code> <code>10</code> 给删除掉, <code>10</code> 所在的下标是 <code>1</code>, 后面的元素的下标分别是 <code>2</code> 跟 <code>3</code>, 后面的 <code>-1</code> 就完成了.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">,</span> <span class="token string">"index out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      result    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IntoIter"><a href="#IntoIter" class="headerlink" title="IntoIter"></a>IntoIter</h2><p>这趟开始处理一下 <strong>Vec</strong> 才有的迭代器, 其实只要实现了自动解引用的 <code>trait</code>, 就可以使用 <code>slice</code> 的 <code>iter</code> 还有 <code>iter_mut</code>, 但是 <code>slice</code> 是没有 <code>into_iter</code> 的, 所以我们得实现一下.<br>现在有个问题, 既然已经有了 <code>slice</code> 的迭代器功能了, 我们为什么要实现这个 <code>IntoIter</code>?<br>我们可以看到一个 <strong>Vec</strong> 可以直接用 <code>for</code> 进行循环遍历, 原因就是只要一个自定义的类型实现了 <code>IntoIter</code> 就具备能被 <code>for</code> 迭代的能力</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> v <span class="token punctuation">{</span>  <span class="token macro property">dbg!</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以用两个指针来处理迭代器的操作, 一个在开头, 一个在结尾后面那一个, 只要开头的指针跟结尾后一个的指针地址相同, 就表明迭代结束了.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> sth<span class="token punctuation">]</span> <span class="token operator">^</span>              <span class="token operator">^</span><span class="token keyword">start</span>           <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在来建立个迭代器结构, 大概长这样</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  start<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">,</span>  end<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然后续还要处理内存相关的, 所以我们应该把 <strong>Vec</strong> 分配的空间讯息保存一下, 当然还要把 <code>MyVec</code> 转化成 <code>IntoIter</code> 类型</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  start<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">,</span>  end<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">,</span>  buf<span class="token punctuation">:</span> <span class="token class-name">MyUniuqe</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  cap<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">into_iter</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token class-name">MyVec</span> <span class="token punctuation">{</span> ptr<span class="token punctuation">,</span> cap<span class="token punctuation">,</span> len <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>    <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">forget</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token class-name">IntoIter</span> <span class="token punctuation">{</span>        buf<span class="token punctuation">:</span> ptr<span class="token punctuation">,</span>        cap<span class="token punctuation">,</span>        start<span class="token punctuation">:</span> ptr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        end<span class="token punctuation">:</span> <span class="token keyword">if</span> cap <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span> ptr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> ptr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还要实现一下迭代器, <code>size_hint</code> 是仿写标准库的, 主要作用是表达剩余可迭代元素数量上下界, 下面是 <code>next</code> 相关的操作</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">fn</span> <span class="token function-definition function">size_hint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">-</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有 <code>next_back</code> 的操作</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">DoubleEndedIterator</span> <span class="token keyword">for</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了处理内存相关的, 我们要给 <code>IntoIter</code> 实现一下 <code>Drop trait</code></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span><span class="token keyword">self</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token function">dealloc</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>cap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RawVec"><a href="#RawVec" class="headerlink" title="RawVec"></a>RawVec</h2><p>现在继续重构代码, 因为我们分别给 <code>IntoIter</code> 跟 <code>MyVec</code> 实现了一遍 <code>Drop</code>, 所以重构一下代码是有必要的</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  buf<span class="token punctuation">:</span> <span class="token class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  len<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> element<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">self</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> element<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">,</span> <span class="token string">"index out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token punctuation">{</span>      <span class="token keyword">self</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token punctuation">{</span>        <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len<span class="token punctuation">,</span> <span class="token string">"index out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>len <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      result    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token type-definition class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  start<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">,</span>  end<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">,</span>  _buf<span class="token punctuation">:</span> <span class="token class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">fn</span> <span class="token function-definition function">size_hint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">-</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">DoubleEndedIterator</span> <span class="token keyword">for</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span><span class="token keyword">self</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token type-definition class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  cap<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token class-name">RawVec</span> <span class="token punctuation">{</span>      ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token punctuation">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      cap<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">fn</span> <span class="token function-definition function">grow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> <span class="token punctuation">(</span>new_cap<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> new_cap <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>cap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>ptr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> layout<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> ptr<span class="token punctuation">.</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">handle_alloc_error</span><span class="token punctuation">(</span><span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">from_size_align_unchecked</span><span class="token punctuation">(</span>            new_cap <span class="token operator">*</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">align_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">(</span>new_cap<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">Self</span> <span class="token punctuation">{</span>        ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span>ptr <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span>        cap<span class="token punctuation">:</span> new_cap<span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token function">dealloc</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>ptr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>cap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抽取迭代操作"><a href="#抽取迭代操作" class="headerlink" title="抽取迭代操作"></a>抽取迭代操作</h2><p>现在我们基本的 <strong>Vec</strong> 结构已经做出来了, 现在仿照之前的 <code>RawVec</code> 做一份封装.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">RawValIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  start<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">,</span>  end<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">RawValIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">unsafe</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>slice<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token class-name">RawValIter</span> <span class="token punctuation">{</span>      start<span class="token punctuation">:</span> slice<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      end<span class="token punctuation">:</span> <span class="token keyword">if</span> slice<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        slice<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        slice<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">isize</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">RawValIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">fn</span> <span class="token function-definition function">size_hint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">-</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">DoubleEndedIterator</span> <span class="token keyword">for</span> <span class="token class-name">RawValIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后改造一下迭代器, 现在只要在各函数内部调用 <code>RawValIter</code> 的实现就行了</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  _buf<span class="token punctuation">:</span> <span class="token class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  iter<span class="token punctuation">:</span> <span class="token class-name">RawValIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fn</span> <span class="token function-definition function">size_hint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>iter<span class="token punctuation">.</span><span class="token function">size_hint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">DoubleEndedIterator</span> <span class="token keyword">for</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>iter<span class="token punctuation">.</span><span class="token function">next_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">IntoIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>iter <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理-Zero-Sized-Types"><a href="#处理-Zero-Sized-Types" class="headerlink" title="处理 Zero-Sized Types"></a>处理 Zero-Sized Types</h2><p>通常情况下, <strong>Rust</strong> 是不需要处理 <strong>Zero-Sized Types</strong> 的, 但是现在我们的代码中有大量关于裸指针的操作, 假如给分配器传递 zst, 会导致未定义行为, 对 <code>zst</code> 裸指针进行 <code>offset</code> 是一个 <code>no-op</code> 行为.</p><p>先把 <code>new</code> 函数的 <code>cap</code> 处理一下, 如果是 <code>size_of</code> 处理出来的 <code>T</code> 是 <code>0</code> 的情况, 就给 <code>0</code> 按位取反(<code>usize::MAX</code>), 因为 <code>T</code> 的 <code>size_of</code> 为 <code>0</code> 其实不需要开辟内存, 反正你存进来的都是 <code>0</code>, 逻辑上不会占用内存.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> cap <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token operator">!</span><span class="token number">0</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">RawVec</span> <span class="token punctuation">{</span>      ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token punctuation">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      cap<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是 <code>grow</code> 函数也处理一下</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token keyword">fn</span> <span class="token function-definition function">grow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> elem_size <span class="token operator">=</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span>elem_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"capacity overflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token punctuation">(</span>new_cap<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> new_cap <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>cap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>ptr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> layout<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>new_cap<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> ptr<span class="token punctuation">.</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handle_alloc_error</span><span class="token punctuation">(</span><span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">from_size_align_unchecked</span><span class="token punctuation">(</span>          new_cap <span class="token operator">*</span> elem_size<span class="token punctuation">,</span>          <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">align_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">Self</span> <span class="token punctuation">{</span>        ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span>ptr <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span>        cap<span class="token punctuation">:</span> new_cap<span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RawVec</code> 的 <code>Drop</code> 也需要处理, 其实之前的实现也可以, 但是假装对齐一下吧!</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> elem_size <span class="token operator">=</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> elem_size <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token function">dealloc</span><span class="token punctuation">(</span>          <span class="token keyword">self</span><span class="token punctuation">.</span>ptr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span>          <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">from_size_align_unchecked</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>cap <span class="token operator">*</span> elem_size<span class="token punctuation">,</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">align_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是 <code>RawValIter</code> 的 <code>zst</code> 处理</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">RawValIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">unsafe</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>slice<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token class-name">RawValIter</span> <span class="token punctuation">{</span>      start<span class="token punctuation">:</span> slice<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      end<span class="token punctuation">:</span> <span class="token keyword">if</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token operator">+</span> slice<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> _      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> slice<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        slice<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        slice<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">isize</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代器也处理一下, <code>size_hint</code> 除数为 <code>0</code> 的情况需要处理</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">RawValIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>          <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> _        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">self</span><span class="token punctuation">.</span>start<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">fn</span> <span class="token function-definition function">size_hint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> elem_size <span class="token operator">=</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">-</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">if</span> elem_size <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> elem_size <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">DoubleEndedIterator</span> <span class="token keyword">for</span> <span class="token class-name">RawValIter</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">next_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token punctuation">{</span>      <span class="token class-name">None</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>          <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> _        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">self</span><span class="token punctuation">.</span>end<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="with-capacity"><a href="#with-capacity" class="headerlink" title="with_capacity"></a>with_capacity</h2><p>这个实现一下差不多算结束了, 先把 <code>MyVec</code> 改一下</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">with_capacity</span><span class="token punctuation">(</span>capacity<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">MyVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">MyVec</span> <span class="token punctuation">{</span>      buf<span class="token punctuation">:</span> <span class="token class-name">RawVec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">,</span>      len<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后给 <code>RawVec</code> 添加个接口</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">RawVec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> cap <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token operator">!</span><span class="token number">0</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">RawVec</span> <span class="token punctuation">{</span>      ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token punctuation">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      cap<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">with_capacity</span><span class="token punctuation">(</span>cap<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token class-name">RawVec</span><span class="token punctuation">::</span><span class="token function">allocate_in</span><span class="token punctuation">(</span>cap<span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">fn</span> <span class="token function-definition function">allocate_in</span><span class="token punctuation">(</span>cap<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">MyUnique</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> elem_size <span class="token operator">=</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span>elem_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"capacity overflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token punctuation">(</span>new_cap<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> cap <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>some_p<span class="token punctuation">)</span> <span class="token operator">=</span> p <span class="token punctuation">{</span>          <span class="token keyword">let</span> new_cap <span class="token operator">=</span> cap <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>cap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>some_p<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> layout<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">(</span>new_cap<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">array</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>cap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">(</span>cap<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> ptr<span class="token punctuation">.</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handle_alloc_error</span><span class="token punctuation">(</span><span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">from_size_align_unchecked</span><span class="token punctuation">(</span>          new_cap <span class="token operator">*</span> elem_size<span class="token punctuation">,</span>          <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">align_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">Self</span> <span class="token punctuation">{</span>        ptr<span class="token punctuation">:</span> <span class="token class-name">MyUnique</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span>ptr <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span>        cap<span class="token punctuation">:</span> new_cap<span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">fn</span> <span class="token function-definition function">grow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>    <span class="token class-name">RawVec</span><span class="token punctuation">::</span><span class="token function">allocate_in</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>cap<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在已经把 <code>grow</code> 抽取出来, 同时给 <code>with_capacity</code> 调用</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2性能优化</title>
      <link href="/2022/12/13/vue2-xing-neng-you-hua/"/>
      <url>/2022/12/13/vue2-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<p>性能优化分为四个模块：代码层面的优化，打包层面的优化，服务层面的优化，图片资源的优化。个数分别为8，3，5，5（记住个数后不容易漏忘）</p><h2 id="一、代码层面的优化"><a href="#一、代码层面的优化" class="headerlink" title="一、代码层面的优化"></a>一、代码层面的优化</h2><p>共8个，记住开头字，这样方便记忆：路函缓脚监，循活容</p><h3 id="1-路由懒加载"><a href="#1-路由懒加载" class="headerlink" title="1. 路由懒加载"></a>1. 路由懒加载</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "Home" */</span><span class="token string">'../components/layout/home.vue'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-函数式组件"><a href="#2-函数式组件" class="headerlink" title="2. 函数式组件"></a>2. 函数式组件</h3><p>函数型组件也被称为无状态组件，无生命周期（意味着钩子函数不能使用），无状态响应（methods中的方法不能响应）。</p><p>在template模板中增加functional即可</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">functional</span><span class="token punctuation">&gt;</span></span>    &lt;el-table      :data="props.items"  //2.3.0之前的Vue版本需要通过props接收传的值，之后的版本可省略      height="400"      border      @selection-change="props.handleSelectChange"    &gt;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"items"</span><span class="token punctuation">,</span><span class="token string">"handleSelectChange"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>优点：无生命周期，渲染快。</p><h3 id="3-缓存不活动的组件实例（-keep-alive）"><a href="#3-缓存不活动的组件实例（-keep-alive）" class="headerlink" title="3. 缓存不活动的组件实例（ keep-alive）"></a>3. 缓存不活动的组件实例（ keep-alive）</h3><h3 id="4-脚本延迟加载"><a href="#4-脚本延迟加载" class="headerlink" title="4. 脚本延迟加载"></a>4. 脚本延迟加载</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>HTML4的defer是“渲染完再执行”，HTML5的async是“下载完就执行”。多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本不能保证加载顺序（如果脚本之间有继承关系，则不能使用async，比如vue与vuex）</p><h3 id="5-监听事件销毁"><a href="#5-监听事件销毁" class="headerlink" title="5. 监听事件销毁"></a>5. 监听事件销毁</h3><p>Vue组件销毁时（切换路由时），会自动清理它与其他实例的连接，解绑它的全部指令及事件监听。如果使用原生的方式，比如addEventListener，事件总线等方式是不会自动销毁的，我们需要在组件销毁时（beforeDestroy或destroyed生命周期）手动移除这些事件的监听，以免造成内存泄漏。</p><h3 id="6-循环添加key"><a href="#6-循环添加key" class="headerlink" title="6. 循环添加key"></a>6. 循环添加key</h3><p>给每个vnode增加一个唯一id，高效的更新VNode。</p><h3 id="7-活用v-show，减少v-if"><a href="#7-活用v-show，减少v-if" class="headerlink" title="7. 活用v-show，减少v-if"></a>7. 活用v-show，减少v-if</h3><p>v-if会改变DOM数，v-show通过display:none的方式来控制显示内容，不会改变DOM数</p><h3 id="8-容易触发重排的元素与“静态”元素分层（使用z-index）"><a href="#8-容易触发重排的元素与“静态”元素分层（使用z-index）" class="headerlink" title="8. 容易触发重排的元素与“静态”元素分层（使用z-index）"></a>8. 容易触发重排的元素与“静态”元素分层（使用z-index）</h3><p>一个页面是由许多层级组成。在一个页面构建完渲染树后，是经历以下流程才最终呈现在我们面前：</p><p>（1）浏览器会先获取DOM树并依据样式将其分割成多个独立的渲染层</p><p>（2）CPU将每个层绘制进绘图中</p><p>（3）将位图作为纹理上传至GPU（显卡）绘制</p><p>（4）GPU将所有的渲染层缓存（如果下次上传的渲染层没有发生变化，GPU就不需要对其进行重绘）并符合多个渲染层最终形成我们的图像</p><p>由上可知：CPU负责布局，GPU负责绘制。</p><p>进行分层让GPU分担更多的渲染工作，我们通常把这样的措施称为硬件加速</p><h2 id="二、打包层面的优化"><a href="#二、打包层面的优化" class="headerlink" title="二、打包层面的优化"></a>二、打包层面的优化</h2><h3 id="1-按需引入，减少打包体积"><a href="#1-按需引入，减少打包体积" class="headerlink" title="1.按需引入，减少打包体积"></a>1.按需引入，减少打包体积</h3><h3 id="2-不生成-map文件"><a href="#2-不生成-map文件" class="headerlink" title="2.不生成.map文件"></a>2.不生成.map文件</h3><p>vue.config.js配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">productionSourceMap</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-打包移除console-log"><a href="#3-打包移除console-log" class="headerlink" title="3.打包移除console.log"></a>3.打包移除console.log</h3><p>原因：毕竟是一次函数调用，并且被console.log调用的函数，不会被垃圾回收机制回收，可能会导致内存泄漏。</p><p>使用babel-plugin-transform-remove-console</p><h2 id="三、服务层面的优化"><a href="#三、服务层面的优化" class="headerlink" title="三、服务层面的优化"></a>三、服务层面的优化</h2><h3 id="1-减少HTTP请求数"><a href="#1-减少HTTP请求数" class="headerlink" title="1.减少HTTP请求数"></a>1.减少HTTP请求数</h3><p>例如：使用雪碧图</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'./images/css_sprites.png'</span><span class="token punctuation">)</span></span> -116px -10px<span class="token punctuation">;</span> //通过调整position来展示图片<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>雪碧图自动生成网站：<a href="https://www.toptal.com/developers/css/sprite-generator">https://www.toptal.com/developers/css/sprite-generator</a></p><h3 id="2-开启gzip传输压缩"><a href="#2-开启gzip传输压缩" class="headerlink" title="2.开启gzip传输压缩"></a>2.开启gzip传输压缩</h3><h3 id="3-DNS预解析"><a href="#3-DNS预解析" class="headerlink" title="3.DNS预解析"></a>3.DNS预解析</h3><p>X-DNS-Prefetch-Control头控制着浏览器的DNS预读取功能。DNS预读取是一项使浏览器主动去执行域名解析的功能，其范围包括文档的所有链接，无论是图片的，CSS的，还是JavaScript等其他用户能够点击的URL</p><h3 id="4-使用CDN加速"><a href="#4-使用CDN加速" class="headerlink" title="4.使用CDN加速"></a>4.使用CDN加速</h3><p>使用BootCDN免费的加速服务，网址：<a href="https://www.bootcdn.cn/">www.bootcdn.cn/</a></p><p>实例：引入echarts</p><p>在index.html中使用cdn引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/echarts/3.7.2/echarts.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在vue.config.js配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//externals中的key是用于import，value表示在全局中访问到该对象，</span>    <span class="token comment">//就是window.echarts，window可省略，直接通过echart访问，echart.init()</span>    <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'echarts'</span><span class="token operator">:</span> <span class="token string">'echarts'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-使用SSR渲染"><a href="#5-使用SSR渲染" class="headerlink" title="5. 使用SSR渲染"></a>5. 使用SSR渲染</h3><h2 id="四、图片资源优化"><a href="#四、图片资源优化" class="headerlink" title="四、图片资源优化"></a>四、图片资源优化</h2><h3 id="1-压缩图片"><a href="#1-压缩图片" class="headerlink" title="1. 压缩图片"></a>1. 压缩图片</h3><p>在线压缩图片网站：<a href="https://tinypng.com/">tinypng.com</a></p><h3 id="2-不在HTML里缩放图片"><a href="#2-不在HTML里缩放图片" class="headerlink" title="2. 不在HTML里缩放图片"></a>2. 不在HTML里缩放图片</h3><p>定义的图片多大，就拿多大的图片，不要在<code>200*200</code>的区域，放<code>400*400</code>的图片</p><h3 id="3-img标签增加alt属性"><a href="#3-img标签增加alt属性" class="headerlink" title="3. img标签增加alt属性"></a>3. img标签增加alt属性</h3><p>在图片加载失败时，同alt属性显示文字，加快页面的反应速度</p><h3 id="4-图片懒加载"><a href="#4-图片懒加载" class="headerlink" title="4. 图片懒加载"></a>4. 图片懒加载</h3><p>方法一：使用element-UI的图片懒加载</p><p>方法二：当元素滚动到可视区域处，再给图片的src属性赋值，去加载图片</p><h3 id="5-使用字体图标代替图片"><a href="#5-使用字体图标代替图片" class="headerlink" title="5. 使用字体图标代替图片"></a>5. 使用字体图标代替图片</h3>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust环境搭建</title>
      <link href="/2022/12/13/rust-huan-jing-da-jian/"/>
      <url>/2022/12/13/rust-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<p>Rust 语言是一种高效、可靠的通用高级语言。其高效不仅限于开发效率，它的执行效率也是令人称赞的，是一种少有的兼顾开发效率和执行效率的语言。</p><h2 id="Rust-环境搭建"><a href="#Rust-环境搭建" class="headerlink" title="Rust 环境搭建"></a>Rust 环境搭建</h2><p>本次搭建使用的是win10的wsl安装的openEuler系统</p><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">RUSTUP_DIST_SERVER</span><span class="token operator">=</span>https://mirrors.ustc.edu.cn/rust-static<span class="token builtin class-name">export</span> <span class="token assign-left variable">RUSTUP_UPDATE_ROOT</span><span class="token operator">=</span>https://mirrors.ustc.edu.cn/rust-static/rustup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="下载安装rust"><a href="#下载安装rust" class="headerlink" title="下载安装rust"></a>下载安装rust</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--proto</span> <span class="token string">'=https'</span> <span class="token parameter variable">--tlsv1.2</span> <span class="token parameter variable">-sSf</span> https://sh.rustup.rs <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token string">"<span class="token environment constant">$HOME</span>/.cargo/env"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检测环境是否配置成功"><a href="#检测环境是否配置成功" class="headerlink" title="检测环境是否配置成功"></a>检测环境是否配置成功</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://kun.nwyp123.com/20221213131919.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rustc <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://kun.nwyp123.com/20221213131948.png"></p><h3 id="国内配置rust的下载镜像（可选）"><a href="#国内配置rust的下载镜像（可选）" class="headerlink" title="国内配置rust的下载镜像（可选）"></a>国内配置rust的下载镜像（可选）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> .cargo<span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://kun.nwyp123.com/20221213132308.png"></p><p>查看是否存在config文件，如果没有创建config文件，然后编辑输入一下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>source.crates-io<span class="token punctuation">]</span>registry <span class="token operator">=</span> <span class="token string">"https://github.com/rust-lang/crates.io-index"</span>replace-with <span class="token operator">=</span> <span class="token string">'ustc'</span><span class="token punctuation">[</span>source.ustc<span class="token punctuation">]</span>registry <span class="token operator">=</span> <span class="token string">"git://mirrors.ustc.edu.cn/crates.io-index"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此rust的环境就配置完成了</p>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/13/hello-world/"/>
      <url>/2022/12/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 欢迎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
